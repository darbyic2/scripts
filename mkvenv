#!/bin/bash
######################################################################
# Wrapper script to create a new python3 virtual environemnt project #
# using the "python3 venv utility.                                   #
######################################################################

usage() {
  echo "Usage:  source mkvenv projectName [ --opencv ]"
}

if [ "${BASH_SOURCE[0]}" != "${0}" ]; then
  # echo "script ${BASH_SOURCE[0]} is being sourced ..."
  # echo P1=$1, P2=$2
  
  if [ -z "$1" ]; then
    echo "Missing required project name argument..."
    usage
  else
    # Make sure that the projects root directory is set
    if [ -z "$VENV_PROJECTS" ]; then
      export VENV_PROJECTS=$HOME/venv_projects
    fi
  
    # Make sure no existing virtual environment is active
    if [ -n "$VIRTUAL_ENV" ]; then
      deactivate
    fi
    
    # Finally create the project directory + environment & activate it
    mkdir -p $VENV_PROJECTS/$1
    cd $VENV_PROJECTS/$1
    mkdir temp
    mkdir src
    mkdir tests
    python3.11 -m venv .venv
    source .venv/bin/activate

    echo "Updating pip package manager"
    python -m pip install --upgrade pip

    echo "Updating wheel package"
    python -m pip install --upgrade wheel

    echo "Installing pytest and pytest-cov"
    python -m pip install pytest pytest-cov

    if [ "$2" == "--opencv" ]; then
      echo "Installing numpy package"
      python -m pip install numpy

      echo "Linking to cv2.so package"
      ln -s /usr/local/lib/python3.10/site-packages/cv2/python-3.10/cv2.so .venv/lib/python3.10/site-packages/cv2.so
    fi
    
    cp ../README.md ./README.md
    cp ../LICENSE_mit ./LICENSE
    cp ../.gitignore_python_template ./.gitignore
    git init

    echo "Creating requirements.txt"
    python -m pip freeze >requirements.txt
  fi
  
else
  echo "script NOT being sourced ..."
  usage
fi
